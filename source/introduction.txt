.. _introduction:

Getting Started
===============

Simple Example
--------------

To start with our tutorial we create the simplest program possible.
This program will create an empty 200 x 200 pixel window. 
Note that the appearance of the window will depend on your current GNOME theme. 

.. image:: ../images/simple_example.png

.. literalinclude:: ../examples/simple_example.js
    :linenos:

We will now explain each line of the example.

.. literalinclude:: ../examples/simple_example.js
    :lines: 1
    :linenos:
    :lineno-start: 1

We start the program with a `shebang-directive <https://en.wikipedia.org/wiki/Shebang_(Unix)>`_, 
which tells the operating system what interpreter to use to execute the file. \

.. literalinclude:: ../examples/simple_example.js
    :lines: 3
    :linenos:
    :lineno-start: 3

In the beginning, we have to import the Gtk module to be able to access GTK+’s classes and functions.
Gtk is one of the libraries that make use of GObject introspection, and is therefore 
listed under the gi collection. 

.. literalinclude:: ../examples/simple_example.js
    :lines: 4
    :linenos:
    :lineno-start: 4

After we have imported Gtk, we must initialize it. 
The init function takes as its argument a list of strings, the command line options passed to your program.
It is, however, ok to pass null to Gtk.init if commandline handling is not required. 


The next line creates an empty window.

.. literalinclude:: ../examples/simple_example.js
    :lines: 6
    :linenos:
    :lineno-start: 6

Followed by connecting to the window’s delete event to ensure that the application is terminated if we click on the x to close the window.

.. literalinclude:: ../examples/simple_example.js
    :lines: 7
    :linenos:
    :lineno-start: 7

In the next step we display the window.

.. literalinclude:: ../examples/simple_example.js
    :lines: 8
    :linenos:
    :lineno-start: 8

Finally, we start the GTK+ processing loop which we quit when the window is closed.

.. literalinclude:: ../examples/simple_example.js
    :lines: 9
    :linenos:
    :lineno-start: 9

You can now run the program by making it executable and running it 

.. code-block:: bash

    chmod +x simple_example.js
    ./simple_example.js

or by running it with gjs 

.. code-block:: bash

    gjs simple_example.js


Extended Example 
----------------
For something a little more useful, here’s the Gjs version of the classic “Hello World” program.

.. image :: ../images/extended_example.png

.. literalinclude:: ../examples/extended_example.js 
    :linenos:

This example differs from the simple example as we sub-class :class: `Gtk.Window` to define our own :class: `MyWindow` class.

In order to do this, we import the lang library, which contains some convenience functions for writing object oriented javascript.

.. literalinclude:: ../examples/extended_example.js
    :lines: 4
    :linenos:
    :lineno-start: 4

We can then define the class using Lang.Class

.. literalinclude:: ../examples/extended_example.js
    :lines: 8, 22
    :linenos:
    :lineno-start: 8

In the class’s constructor we have to call the constructor of the super class. In addition, we tell it to set the value of the property title to Hello World.

.. literalinclude:: ../examples/extended_example.js
    :lines: 13
    :linenos:
    :lineno-start: 13

The next three lines are used to create a button widget, connect to its clicked signal and add it as child to the top-level window.

.. literalinclude:: ../examples/extended_example.js
    :lines: 14-16
    :linenos:
    :lineno-start: 14

Accordingly, the method  `onButtonClicked` will be called if you click on the button.

.. literalinclude:: ../examples/extended_example.js
    :lines: 19-21
    :linenos:
    :lineno-start: 19

The last block, outside of the class, is very similar to the simple example above, but instead of creating an instance of the generic :class: `Gtk.Window` class, we create an instance of :class: `MyWindow`.
